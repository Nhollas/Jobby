// <auto-generated />
using System;
using Jobby.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jobby.Persistence.Data.Migrations
{
    [DbContext(typeof(JobbyContext))]
    [Migration("20220811111746_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Jobby.Core.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardFk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("JobFk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardFk");

                    b.HasIndex("JobFk");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Jobby.Core.Entities.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Jobby.Core.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardFk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Companies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardFk");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Jobby.Core.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HexColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobListFk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobListFk");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Jobby.Core.Entities.JobContact", b =>
                {
                    b.Property<Guid>("ContactFk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobFk")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContactFk", "JobFk");

                    b.HasIndex("JobFk");

                    b.ToTable("JobContacts");
                });

            modelBuilder.Entity("Jobby.Core.Entities.JobList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardFk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardFk");

                    b.ToTable("JobLists");
                });

            modelBuilder.Entity("Jobby.Core.Entities.Activity", b =>
                {
                    b.HasOne("Jobby.Core.Entities.Board", "Board")
                        .WithMany("Activities")
                        .HasForeignKey("BoardFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jobby.Core.Entities.Job", "Job")
                        .WithMany("Activities")
                        .HasForeignKey("JobFk");

                    b.Navigation("Board");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Jobby.Core.Entities.Contact", b =>
                {
                    b.HasOne("Jobby.Core.Entities.Board", "Board")
                        .WithMany("Contacts")
                        .HasForeignKey("BoardFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Jobby.Core.Entities.Social", "Social", b1 =>
                        {
                            b1.Property<Guid>("ContactId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FacebookUri")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("GithubUri")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LinkedInUri")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TwitterUri")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.Navigation("Board");

                    b.Navigation("Social");
                });

            modelBuilder.Entity("Jobby.Core.Entities.Job", b =>
                {
                    b.HasOne("Jobby.Core.Entities.JobList", "JobList")
                        .WithMany("Jobs")
                        .HasForeignKey("JobListFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobList");
                });

            modelBuilder.Entity("Jobby.Core.Entities.JobContact", b =>
                {
                    b.HasOne("Jobby.Core.Entities.Contact", "Contact")
                        .WithMany("JobContacts")
                        .HasForeignKey("ContactFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Jobby.Core.Entities.Job", "Job")
                        .WithMany("JobContacts")
                        .HasForeignKey("JobFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Jobby.Core.Entities.JobList", b =>
                {
                    b.HasOne("Jobby.Core.Entities.Board", "Board")
                        .WithMany("JobList")
                        .HasForeignKey("BoardFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Jobby.Core.Entities.Board", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Contacts");

                    b.Navigation("JobList");
                });

            modelBuilder.Entity("Jobby.Core.Entities.Contact", b =>
                {
                    b.Navigation("JobContacts");
                });

            modelBuilder.Entity("Jobby.Core.Entities.Job", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("JobContacts");
                });

            modelBuilder.Entity("Jobby.Core.Entities.JobList", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
